# Generated by Django 5.1.2 on 2024-11-22 18:46

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.CharField(editable=False, max_length=14, unique=True)),
                ('name', models.CharField(blank=True, help_text='Enter the full name.', max_length=50, null=True, validators=[django.core.validators.MaxLengthValidator(50)], verbose_name='Full Name')),
                ('email', models.EmailField(help_text='Enter the email address.', max_length=255, unique=True, verbose_name='Email Address')),
                ('is_email_verified', models.BooleanField(default=False, help_text="Indicates if the user's email address is verified.", verbose_name='Email Verified')),
                ('phone_number', models.CharField(blank=True, help_text='Phone number with country code.', max_length=15, null=True, unique=True, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$', message='Enter a valid phone number.')], verbose_name='Phone Number')),
                ('is_phone_no_verified', models.BooleanField(default=False, help_text="Indicates if the user's phone number is verified.", verbose_name='Phone Verified')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('account_type', models.IntegerField(choices=[(0, 'Undefined'), (1, 'Photographer'), (2, 'Client')], default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'accounts"."users',
                'ordering': ['-date_joined'],
                'indexes': [models.Index(fields=['user_id', 'username', 'email'], name='users_user_id_567040_idx')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
